.
├── docker-compose.yml        # 主编排文件
├── config/
│   └── dify-config.yaml      # Dify 配置文件
├── models/
│   └── deepseek-1.3b-chat.Q4_K_M.gguf  # 自动下载
├── knowledge/
│   ├── documents/            # 知识库文档
│   └── vector_db/            # 自动生成向量库
└── scripts/
    ├── init.sh               # 一键初始化脚本
    └── download-model.sh     # 模型下载脚本




    服务	访问地址	用途
对话界面	http://localhost:8080	用户交互入口
Dify 控制台	http://localhost:3000	系统管理后台
模型 API	http://localhost:8000/docs	调试模型推理

    知识库 API	http://localhost:8000/docs	调试知识库 API
    向量数据库	http://localhost:8000/docs	调试向量数据库
    Redis	redis://localhost:6379	缓存服务
    MinIO	http://localhost:9000	对象存储服务
    PostgreSQL	postgresql://localhost:5432	关系型数据库服务
    Redis	redis://localhost:6379	缓存服务
    MinIO	http://localhost:9000	对象存储服务
    PostgreSQL	postgresql://localhost:5432	关系型数据库服务
    启动 Dify
    1. 克隆代码
    ```bash
    git clone


# 在 docker-compose.yml 中添加定期更新任务
services:
  knowledge-update:
    extends: knowledge-init
    schedules:
      - cron: "0 3 * * *"  # 每天凌晨3点更新


docker-compose build
docker-compose up -d
docker-compose ps

# 应显示两个服务均为 "running"


1. 调整模型参数
修改 docker-compose.yml 中的启动命令：

command: ["python3", "-m", "llama_cpp.server", 
          "--model", "/models/deepseek-1.3b-chat.Q4_K_M.gguf",
          "--n_ctx", "1024",        # 减小上下文长度
          "--n_threads", "6",       # 设置为物理核心数-2
          "--n_batch", "256"]       # 降低批处理大小



# 将文档放入 knowledge 目录
cp ~/Documents/my_knowledge.pdf ./knowledge/

# 重建服务时自动处理知识库
# 需扩展 docker-compose 配置（需额外添加向量数据库服务）

# 仅重建知识库服务
docker-compose build --no-cache knowledge-init


# 进入项目根目录
cd /path/to/your/project

# 赋予 init.sh 执行权限
chmod +x scripts/init.sh


chmod +x scripts/*.sh

ls -l scripts/